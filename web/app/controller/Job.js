/*
 * File: app/controller/Job.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Job', {
    extend: 'Ext.app.Controller',

    stores: [
        'Job',
        'JobOutput'
    ],

    refs: [
        {
            ref: 'grid',
            selector: '#jobgrid'
        },
        {
            ref: 'textarea',
            selector: '#jobdetailtext'
        }
    ],

    onGridpanelItemDblClick: function(tablepanel, record, item, index, e, options) {
        var window = Ext.widget('jobdetail');
        var t = this; // for scope in interval function
        t.getJobOutputStore().setJobId(record.get('id'));

        detailQuery = 0;

        refreshIntervalId = setInterval(function() {
            if (detailQuery== 0) {
                detailQuery = 1;    
                var store = t.getJobOutputStore();
                store.load(function(r, options, success) {
                    t.getTextarea().update('<pre>'+r[0].get('output')+'</pre>');

                    if (r[0].get('state') != 'running' && r[0].get('state') != 'pending') {
                        clearInterval(refreshIntervalId);
                    }
                    detailQuery = 0;
                }

                );
            }
        }, 1000);



    },

    onWindowDestroy: function(abstractcomponent, options) {
        if (typeof refreshIntervalId !== 'undefined') {

            clearInterval(refreshIntervalId);
        }
    },

    onUserjobsClick: function(button, e, options) {
        userJobs = true;

        this.getJobStore().filter('userId', this.getController('User').getUserId());
    },

    onSystemjobsClick: function(button, e, options) {
        userJobs = false;
        this.getJobStore().clearFilter();

    },

    onLaunch: function() {
        var t = this;
        jobQuery = 0; //jobStore load is limited to one simulatenous load with jobquery variable
        /*
        var interval = setInterval(function() {
        if (jobQuery == 0) {
        jobQuery = 1;
        var store = t.getJobStore();
        store.load(function(r, options, success) {
        jobQuery = 0;
        });
        }
        }, 2000);*/
    },

    init: function(application) {
        this.control({
            "#jobgrid": {
                itemdblclick: this.onGridpanelItemDblClick
            },
            "window": {
                destroy: this.onWindowDestroy
            },
            "#userJobs": {
                click: this.onUserjobsClick
            },
            "#systemJobs": {
                click: this.onSystemjobsClick
            }
        });
    }

});
