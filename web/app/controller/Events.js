/*
 * File: app/controller/Events.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Events', {
    extend: 'Ext.app.Controller',

    stores: [
        'Events',
        'Virtualmachine',
        'Job',
        'Disk',
        'Node'
    ],

    onLaunch: function() {
        var store = this.getEventsStore();
        store.setLastEvent();

        lastEvent = 0;

        store.load({
            scope: this,
            callback: function(records, operation, success) {
                lastEvent = records[0].get('id');
                this.loadTask(lastEvent);

            }
        });




    },

    handleRecords: function(records) {
        Ext.each(records, function(record){

            var store = this.getEntityStore(record.get('entity'));

            if (typeof store != 'undefined') {

                if (record.get('entity') == 'Disk') { // handle virtualmachine disk tab
                    if (record.get('data').virtualmachineId != this.getController('Virtualmachine').getId()) {
                        return 0;
                    }
                }



                var record2 = store.getById(record.get('entityId'));

                if (record.get('action') == 'update') {

                    if (record2 !== null) {                
                        record2.data = record.get('data');
                    }
                } else if (record.get('action') == 'insert') {
                    if (record2 === null) {  
                        store.add(record.get('data'));
                    }
                } else if (record.get('action') == 'remove') {
                    if (record2 !== null) {  
                        store.remove(record2);
                    }
                }


                lastEvent = record.get('id');

                store.fireEvent('datachanged');
                store.fireEvent('refresh');   

                if (record.get('entity') == 'Job') {
                    this.getJobStore().clearFilter();
                    this.getJobStore().sort([{ property: 'id',  direction: 'desc' }]);
                    if (userJobs) {
                        this.getJobStore().filter('userId', this.getController('User').getUserId());
                    }


                }

            }
        }, this);





    },

    getEntityStore: function(entity) {
        if (entity == 'VirtualMachine') {
            return this.getVirtualmachineStore();
        }

        if (entity == 'Job') {
            return this.getJobStore();
        }

        if (entity == 'Disk') {
            return this.getDiskStore();
        }

        if (entity == 'Node') {
            return this.getNodeStore();
        }
    },

    loadTask: function(lastId) {
        if (lastId) {

            eventQueryRunning = 0;
            lastEvent = lastId;
            changedTask = 
            {
                run : function() 
                {

                    var store = this.getEventsStore();

                    if (eventQueryRunning == 0) {

                        eventQueryRunning = 1;

                        store.setEvent(lastEvent);
                        store.load({
                            scope: this,
                            callback: function(records, operation, success) {
                                eventQueryRunning = 0;
                                if (success) {
                                    this.handleRecords(records);
                                } 
                            }
                        });
                    }


                },
                interval: 1000, //(1 second = 1000)
                scope: this
            }

            Ext.TaskManager.start(changedTask);
        }
    }

});
