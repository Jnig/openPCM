/*
 * File: app/controller/Storage.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Storage', {
    extend: 'Ext.app.Controller',

    stores: [
        'Storage',
        'Disk'
    ],

    refs: [
        {
            ref: 'grid',
            selector: '#storagelistgrid'
        }
    ],

    onButtonClick: function(button, e, eOpts) {
        this.save(button);
    },

    onButtonClick1: function(button, e, eOpts) {
        this.save(button);
    },

    onGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {

        var name = record.get('entity');

        if (name == 'StorageDir') {
            var window = Ext.widget('storagedir');
        } else if (name == 'StorageIscsi') {
            var window = Ext.widget('storageiscsi');    
        } else if (name == 'StorageRbd') {
            var window = Ext.widget('storagerbd');    
        } else if (name == 'StorageNetfs') {
            var window = Ext.widget('storagenetfs');    
        } else if (name == 'StorageLogical') {
            var window = Ext.widget('storagelogical');    
        }

        var form = window.down('form');

        form.loadRecord(record);
    },

    onButtonClick2: function(button, e, eOpts) {
        this.save(button);
    },

    onButtonClick3: function(button, e, eOpts) {
        this.save(button);
    },

    onButtonClick4: function(button, e, eOpts) {
        this.save(button);
    },

    deletestorage: function(button, e, eOpts) {
        var selected = this.getGrid().getSelectionModel().getSelection();


        if (selected.length > 0 ) {
            Ext.Msg.confirm('Remove Storage', 'You are about to remove <span style="color:red;font-weight:bold;">' + selected.length+ '</span> Storage. Are you sure?', function (button) {
                if (button == 'yes') {
                    this.getStorageStore().remove(selected);
                }
            }, this);

        }
    },

    onStorageDiskButtonClick: function(button, e, eOpts) {

        var selected = this.getGrid().getSelectionModel().getSelection();
        console.log(selected);
        this.getDiskStore().setStorageId(selected[0].get('id'));

        this.getController('Navigation').switchContent('storagedisklist');

    },

    save: function(button) {
        var form = button.up('window').down('form');

        var values = form.getValues();
        var store = this.getStorageStore();



        if (form.getForm().isValid()) {
            var record = form.getRecord();

            if (typeof(record) != 'object' ) {
                store.add(values);      
            } else {

                record.set(values);
            }

            button.up('window').close();
        } 
    },

    init: function(application) {
        this.control({
            "storagedir button[action=save]": {
                click: this.onButtonClick
            },
            "storagelogical button[action=save]": {
                click: this.onButtonClick1
            },
            "storagelist": {
                itemdblclick: this.onGridpanelItemDblClick
            },
            "storageiscsi button[action=save]": {
                click: this.onButtonClick2
            },
            "storagerbd button[action=save]": {
                click: this.onButtonClick3
            },
            "storagenetfs button[action=save]": {
                click: this.onButtonClick4
            },
            "#storagedelete": {
                click: this.deletestorage
            },
            "#storageDiskButton": {
                click: this.onStorageDiskButtonClick
            }
        });
    }

});
