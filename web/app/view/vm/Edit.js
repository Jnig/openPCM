/*
 * File: app/view/vm/Edit.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.vm.Edit', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.vmedit',

    height: 437,
    title: 'Virtualmachine',
    activeTab: 0,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    border: false,
                    height: 100,
                    padding: '',
                    layout: {
                        type: 'anchor'
                    },
                    title: 'Settings',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    id: 'vmstart',
                                    text: 'Start'
                                },
                                {
                                    xtype: 'button',
                                    id: 'vmshutdown',
                                    text: 'Shutdown'
                                },
                                {
                                    xtype: 'button',
                                    id: 'vmreset',
                                    text: 'Reset'
                                },
                                {
                                    xtype: 'button',
                                    id: 'vmdestroy',
                                    text: 'Hard Shutdown'
                                },
                                {
                                    xtype: 'button',
                                    id: 'vmeditvnc',
                                    iconCls: 'icon-vnc',
                                    text: 'Console'
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'form',
                            buttons: [
                                {
                                    text: 'Save',
                                    action: 'save'
                                }
                            ],
                            border: false,
                            height: 136,
                            margin: 10,
                            width: 262,
                            bodyPadding: 0,
                            title: '',
                            items: [
                                {
                                    xtype: 'container',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Name',
                                            name: 'name'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            fieldLabel: 'CPU',
                                            name: 'vcpu',
                                            allowBlank: false,
                                            maxValue: 16,
                                            minValue: 1
                                        },
                                        {
                                            xtype: 'numberfield',
                                            fieldLabel: 'Memory in MB',
                                            name: 'memory',
                                            allowBlank: false
                                        },
                                        {
                                            xtype: 'combobox',
                                            fieldLabel: 'Boot Device',
                                            name: 'bootDev',
                                            displayField: 'name',
                                            store: 'vm.bootDev',
                                            valueField: 'name'
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    rememberSelection: function() {
                        if (!this.rendered || Ext.isEmpty(this.el)) {
                            return;
                        }

                        this.selectedRecords = this.getSelectionModel().getSelection();
                        this.getView().saveScrollState();
                    },
                    refreshSelection: function() {
                        if (0 >= this.selectedRecords.length) {
                            return;
                        }

                        var newRecordsToSelect = [];
                        for (var i = 0; i < this.selectedRecords.length; i++) {
                            record = this.getStore().getById(this.selectedRecords[i].getId());
                            if (!Ext.isEmpty(record)) {
                                newRecordsToSelect.push(record);
                            }
                        }

                        this.getSelectionModel().select(newRecordsToSelect);
                    },
                    id: 'vmdiskgrid',
                    title: 'Disks',
                    store: 'Disk',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'splitbutton',
                                    id: 'existingDiskLink',
                                    iconCls: 'icon-add',
                                    text: 'Add Disk',
                                    menu: {
                                        xtype: 'menu',
                                        cls: 'no-icon-menu',
                                        showSeparator: false,
                                        items: [
                                            {
                                                xtype: 'menuitem',
                                                id: 'enabledrbd',
                                                padding: 0,
                                                text: 'Add Drbd Disk'
                                            }
                                        ]
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'deleteDisk',
                                    iconCls: 'icon-delete',
                                    text: 'Remove Disk'
                                }
                            ]
                        }
                    ],
                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                    }),
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'id',
                            text: 'Id'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'path',
                            text: 'Path',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'storageName',
                            text: 'Storage'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'driverType',
                            text: 'DriverType'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'diskDevice',
                            text: 'DiskDevice'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'capacity',
                            text: 'Capacity in GB'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'allocation',
                            text: 'Allocation in GB'
                        }
                    ],
                    listeners: {
                        itemcontextmenu: {
                            fn: me.onVmdiskgridItemContextMenu,
                            scope: me
                        },
                        show: {
                            fn: me.onVmdiskgridShow,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    title: 'Network',
                    store: 'Interface',
                    viewConfig: {
                        id: 'vmeditinterfacegrid'
                    },
                    tabConfig: {
                        xtype: 'tab',
                        id: 'vmeditinterfacetab'
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-add',
                                    text: 'Add Interface',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'vmeditinterfacedelete',
                                    iconCls: 'icon-delete',
                                    text: 'Delete Interface'
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'id',
                            text: 'Id'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'name',
                            text: 'Network'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'modelType',
                            text: 'ModelType'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'macAddress',
                            text: 'MacAddress'
                        }
                    ],
                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                    }),
                    listeners: {
                        activate: {
                            fn: me.onGridpanelActivate,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    id: 'vnctab',
                    layout: {
                        type: 'fit'
                    },
                    title: 'VNC Console',
                    items: [
                        {
                            xtype: 'component',
                            autoEl: {
                                tag: 'iframe',
                                src: '',
                                style: 'border:0px;'
                            },
                            id: 'vnciframe'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onVmdiskgridItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        e.stopEvent(); 

        if (typeof menu !== 'undefined') {
            menu.destroy(); 
        }

        if (record.get('entity') == 'DiskLogical') {

            menu = Ext.widget('diskmenu');    

            menu.showAt(e.getXY()); 
        }

        if (record.get('entity') == 'DiskDrbd') {

            menu = Ext.widget('diskmenudrbd');    

            menu.showAt(e.getXY()); 
        }




        return false;




    },

    onVmdiskgridShow: function(component, eOpts) {


        var Mask = new Ext.LoadMask(this.getEl(), {"msg":"Please wait..", "store": component.getStore()});

        Mask.show();
        component.getStore().load();


        /*diskTask = 
        {
        run : function() 
        {
        abstractcomponent.getStore().reload();

        },
        interval: 4000 //(1 second = 1000)
        }*/

        //Ext.TaskManager.start(diskTask);
    },

    onButtonClick: function(button, e, eOpts) {
        Ext.widget('interfaceadd');

    },

    onGridpanelActivate: function(component, eOpts) {
        var Mask = new Ext.LoadMask(this.getEl(), {"msg":"Please wait..", "store": component.getStore()});
        Mask.show();


    }

});