/*
 * File: app/view/vm/edit/disk/List.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.vm.edit.disk.List', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.mygridpanel3',

    id: 'vmdiskgrid',
    title: 'Disks',
    store: 'Disk',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {

            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            id: 'existingDiskLink',
                            iconCls: 'icon-add',
                            text: 'Add Disk'
                        },
                        {
                            xtype: 'button',
                            id: 'deleteDisk',
                            iconCls: 'icon-delete',
                            text: 'Remove Disk'
                        }
                    ]
                }
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {

            }),
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'Id'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'path',
                    flex: 1,
                    text: 'Path'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'storage',
                    text: 'Storage'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'driverType',
                    text: 'DriverType'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'diskDevice',
                    text: 'DiskDevice'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'capacity',
                    text: 'Capacity in GB'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'allocation',
                    text: 'Allocation in GB'
                }
            ],
            listeners: {
                itemcontextmenu: {
                    fn: me.onVmdiskgridItemContextMenu,
                    scope: me
                },
                show: {
                    fn: me.onVmdiskgridShow,
                    scope: me
                },
                hide: {
                    fn: me.onVmdiskgridHide,
                    scope: me
                },
                beforeshow: {
                    fn: me.onVmdiskgridBeforeShow,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onVmdiskgridItemContextMenu: function(tablepanel, record, item, index, e, options) {
        e.stopEvent(); 

        if (typeof menu !== 'undefined') {
            menu.destroy(); 
        }

        if (record.get('entity') == 'DiskLogical') {

            menu = Ext.widget('diskmenu');    

            menu.showAt(e.getXY()); 
        }

        if (record.get('entity') == 'DiskDrbd') {

            menu = Ext.widget('diskmenudrbd');    

            menu.showAt(e.getXY()); 
        }




        return false;




    },

    onVmdiskgridShow: function(abstractcomponent, options) {


        var Mask = new Ext.LoadMask(this.getEl(), {"msg":"Please wait..", "store": abstractcomponent.getStore()});

        Mask.show();

        diskTask = 
        {
            run : function() 
            {
                abstractcomponent.getStore().load();
            },
            interval: 3000 //(1 second = 1000)
        }

        Ext.TaskManager.start(diskTask);
    },

    onVmdiskgridHide: function(abstractcomponent, options) {
        Ext.TaskManager.stop(diskTask);
    },

    onVmdiskgridBeforeShow: function(abstractcomponent, options) {
        abstractcomponent.getStore().on('beforeload', abstractcomponent.rememberSelection, abstractcomponent);
        abstractcomponent.getView().on('refresh', abstractcomponent.refreshSelection, abstractcomponent);
    },

    rememberSelection: function() {
        if (!this.rendered || Ext.isEmpty(this.el)) {
            return;
        }

        this.selectedRecords = this.getSelectionModel().getSelection();
        this.getView().saveScrollState();
    },

    refreshSelection: function() {
        if (0 >= this.selectedRecords.length) {
            return;
        }

        var newRecordsToSelect = [];
        for (var i = 0; i < this.selectedRecords.length; i++) {
            record = this.getStore().getById(this.selectedRecords[i].getId());
            if (!Ext.isEmpty(record)) {
                newRecordsToSelect.push(record);
            }
        }

        this.getSelectionModel().select(newRecordsToSelect);
    }

});