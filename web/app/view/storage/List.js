/*
 * File: app/view/storage/List.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.storage.List', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.storagelist',

    height: 250,
    width: 400,
    iconCls: 'icon-drive',
    title: 'Storage',
    store: 'Storage',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {
                id: 'storagelistgrid'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: 'Add Storage',
                            menu: {
                                xtype: 'menu',
                                width: 120,
                                items: [
                                    {
                                        xtype: 'menuitem',
                                        iconCls: 'icon-folder',
                                        text: 'Directory',
                                        listeners: {
                                            click: {
                                                fn: me.onDirectoryClick,
                                                scope: me
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'LVM',
                                        listeners: {
                                            click: {
                                                fn: me.onMenuitemClick,
                                                scope: me
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'NFS',
                                        listeners: {
                                            click: {
                                                fn: me.onMenuitemClick1,
                                                scope: me
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'ISCSI',
                                        listeners: {
                                            click: {
                                                fn: me.onMenuitemClick2,
                                                scope: me
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'Ceph RBD',
                                        listeners: {
                                            click: {
                                                fn: me.onMenuitemClick3,
                                                scope: me
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'storagedelete',
                            iconCls: 'icon-delete',
                            text: 'Delete'
                        },
                        {
                            xtype: 'button',
                            id: 'storageDiskButton',
                            text: 'Show Disks'
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'id',
                    text: 'Id'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'name',
                    text: 'Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'path',
                    text: 'Path'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'entity',
                    text: 'Entity'
                }
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {

            }),
            listeners: {
                afterrender: {
                    fn: me.onGridpanelAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onDirectoryClick: function(item, e, options) {
        Ext.widget('storagedir');
    },

    onMenuitemClick: function(item, e, options) {
        Ext.widget('storagelogical');
    },

    onMenuitemClick1: function(item, e, options) {
        Ext.widget('storagenetfs');
    },

    onMenuitemClick2: function(item, e, options) {
        Ext.widget('storageiscsi');
    },

    onMenuitemClick3: function(item, e, options) {
        Ext.widget('storagerbd');
    },

    onGridpanelAfterRender: function(abstractcomponent, options) {
        var Mask = new Ext.LoadMask(this.getEl(), {"msg":"Please wait..", "store": this.getStore()});
        Mask.show();
        this.getStore().getProxy().url = '/api/storages';
        this.getStore().load();

    }

});