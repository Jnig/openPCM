/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

//@require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});

Ext.application({

    requires: [
        'MyApp.view.MainView',
        'MyApp.view.vm.List',
        'MyApp.view.vm.Add',
        'MyApp.view.vm.contextmenu',
        'MyApp.view.vm.Edit',
        'MyApp.view.storage.Dir',
        'MyApp.view.storage.Iscsi',
        'MyApp.view.storage.Netfs',
        'MyApp.view.storage.Rbd',
        'MyApp.view.storage.Logical',
        'MyApp.view.node.List',
        'MyApp.view.node.Add',
        'MyApp.view.vm.Vnc',
        'MyApp.view.disk.Existing',
        'MyApp.view.explorer',
        'MyApp.view.disk.Add',
        'MyApp.view.storage.disk.List',
        'MyApp.view.cluster.List',
        'MyApp.view.cluster.Add',
        'MyApp.view.network.List',
        'MyApp.view.network.Add',
        'MyApp.view.interface.Add',
        'MyApp.view.disk.Drbd',
        'MyApp.view.disk.Menu',
        'MyApp.view.disk.menu.Drbd',
        'MyApp.view.disk.Edit',
        'MyApp.view.job.Detail',
        'MyApp.view.user.List',
        'MyApp.view.user.Add',
        'MyApp.view.template.List',
        'MyApp.view.vm.edit.disk.List'
    ],
    models: [
        'Virtualmachine',
        'Storage',
        'Node',
        'Disk',
        'Cluster',
        'Network',
        'Interface',
        'Ip',
        'Job',
        'job.Output',
        'User',
        'Navigation',
        'Stonith',
        'StonithMeta',
        'Event'
    ],
    stores: [
        'Navigation',
        'hardware.Model',
        'disk.Type',
        'disk.driver.Type',
        'disk.Device',
        'File',
        'network.forwardMode',
        'interface.modelType',
        'vm.bootDev',
        'role'
    ],
    views: [
        'MainView',
        'Vmlist',
        'vm.List',
        'vm.Add',
        'vm.contextmenu',
        'vm.Edit',
        'storage.Dir',
        'storage.Iscsi',
        'storage.Netfs',
        'storage.Rbd',
        'storage.Logical',
        'node.List',
        'node.Add',
        'vm.Vnc',
        'disk.Existing',
        'explorer',
        'disk.Add',
        'storage.disk.List',
        'cluster.List',
        'cluster.Add',
        'network.List',
        'network.Add',
        'interface.Add',
        'disk.Drbd',
        'disk.Menu',
        'disk.menu.Drbd',
        'disk.Edit',
        'job.Detail',
        'user.List',
        'user.Add',
        'template.List',
        'vm.edit.disk.List'
    ],
    autoCreateViewport: true,
    controllers: [
        'Navigation',
        'Virtualmachine',
        'Storage',
        'Node',
        'Disk',
        'Cluster',
        'Network',
        'Drbd',
        'Interface',
        'Job',
        'User',
        'Events'
    ],
    name: 'MyApp',

    launch: function() {
        Ext.Ajax.on('requestexception', function (conn, response, options) {
            if (response.status === 403) {
                window.location = '/';
            }

            try {
                var obj = Ext.decode(response.responseText);

                if ('error' in obj) {
                    obj.error = obj.error.replace(/\n/,"<br />");
                    Ext.MessageBox.alert('Error', 'There was an error on the last action<br /><br />'+obj.error);
                } else {
                    Ext.MessageBox.alert('Error', 'There was an error on the last Ajax request');
                }

            } catch (err) {

            }


        });

        Ext.Ajax.on('requestcomplete', function (conn, response, options) {
            if (response.responseText) {
                try {
                    var obj = Ext.decode(response.responseText);

                    if ('error' in obj) {
                        obj.error = obj.error.replace(/\n/,"<br />");
                        Ext.MessageBox.alert('Error', 'There was an error on the last action<br /><br />'+obj.error);
                    }
                } catch (err) {

                }
            }
        });

    }

});
